name: Test flake templates

on:
  workflow_call:

env:
  NIX_CONFIG: "access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}"

jobs:
  test-template:
    strategy:
      fail-fast: false
      matrix:
        template:
          - simple
          - simple-devenv
          - python-web
          - python-web-devenv
        os:
          - ubuntu-22.04
          # - macos-11

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install nix
      uses: cachix/install-nix-action@v24

    - name: Set new project directory
      run: |
        echo "TEMPLATE_PROJECT_DIR=$(dirname $GITHUB_WORKSPACE)/template-project" >> $GITHUB_ENV

    - name: Prepare new project directory
      run: |
        mkdir $TEMPLATE_PROJECT_DIR

    - name: Create new flake project
      run: |
        git init

        nix flake init --accept-flake-config --template ${GITHUB_WORKSPACE}#${{ matrix.template }}

        git add *
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}

    - name: Point Geonix input to the local source code directory
      run: |
        sed -i.orig "s|geonix.url = \".*\";|geonix.url = \"path:${GITHUB_WORKSPACE}\";|" flake.nix

        nix --access-tokens github.com=${{ secrets.GITHUB_TOKEN }} flake update
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}

    - name: Flake check
      run: >
        nix flake check --impure --no-build --accept-flake-config
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}

    - name: Flake lock
      run: |
        nix flake lock --impure --accept-flake-config

        git add flake.lock
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}


    # python-web
    - name: Test template (if Linux + python-web template - DB backend)
      run: |
        nix develop --accept-flake-config .#postgresql --command echo &

        nix develop --accept-flake-config --command poetry install

        export BACKEND=db
        nix develop --accept-flake-config --command poetry run flask --app src/python_app run &

        curl --retry 10 --retry-all-errors localhost:5000 | grep POLYGON
      if: ${{ runner.os == 'Linux' && matrix.template == 'python-web' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}

    - name: Test deployment (if Linux + python-web)
      run: |
        nix build --accept-flake-config .#container
        docker load < ./result

        docker build -t python-app:latest .
        docker run -d -p 8000:8000 python-app:latest

        curl --retry 10 --retry-all-errors localhost:8000 | grep POLYGON
      if: ${{ runner.os == 'Linux' && matrix.template == 'python-web' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}


    # python-web-devenv
    - name: Test template (if Linux + python-web-devenv template - DB backend)
      run: |
        nix develop --impure --accept-flake-config --command devenv up &

        export BACKEND=db
        nix develop --impure --accept-flake-config --command poetry run flask --app src/python_app run &

        curl --retry 10 --retry-all-errors localhost:5000 | grep POLYGON
      if: ${{ runner.os == 'Linux' && matrix.template == 'python-web-devenv' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}


    # simple
    - name: Test template (if simple template - default shell)
      run: |
        nix develop --accept-flake-config --command gdalinfo --version
      if: ${{ matrix.template == 'simple' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}

    - name: Test template (if simple template - postgresql shell)
      run: |
        nix develop --accept-flake-config .#postgresql --command echo &
        sleep 10
      if: ${{ matrix.template == 'simple' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}


    # simple-devenv
    - name: Test template (if simple-devenv template)
      run: |
        nix develop --impure --accept-flake-config --command gdalinfo --version
      if: ${{ matrix.template == 'simple-devenv' }}
      working-directory: ${{ env.TEMPLATE_PROJECT_DIR }}
