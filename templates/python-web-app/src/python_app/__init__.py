#!/usr/bin/env python

import base64
import os
from io import BytesIO
from random import randrange

import psycopg
from flask import Flask
from matplotlib.figure import Figure
from psycopg.types import TypeInfo
from psycopg.types.shapely import register_shapely
from shapely.geometry import MultiPoint, Point, Polygon

app = Flask(__name__)


def _get_points_local():
    """Return points generated by Python as MultiPoint geometry object."""

    points = []

    for i in range(10):
        x = randrange(1, 100)
        y = randrange(1, 100)
        points.append(Point(x, y))

    return MultiPoint(points)


def _get_points_db():
    """Return points generated by PostGIS query as MultiPoint geometry object."""

    dsn = "dbname=postgres host=localhost user=postgres password=postgres port=15432"

    sql = """
        SELECT ST_GeneratePoints(geom, 12)
        FROM (
            SELECT ST_Buffer(
                ST_GeomFromText(
                'LINESTRING(50 50,150 150,150 50)'),
                10, 'endcap=round join=round') AS geom
        ) AS s;
    """

    with psycopg.connect(dsn) as conn:

        with conn.cursor() as cur:

            cur.execute("CREATE EXTENSION IF NOT EXISTS postgis;")

            info = TypeInfo.fetch(conn, "geometry")
            register_shapely(info, cur)

            cur.execute(sql)

            return cur.fetchone()[0]


def get_points(backend="local"):
    """Return points from selected backend as MultiPoint geometry object."""

    if backend == "db":
        return _get_points_db()
    else:
        return _get_points_local()


@app.route("/")
def shape():
    """Root API entrypoint."""

    backend = os.environ.get("BACKEND", "local")

    # get points from backend
    points = get_points(backend=backend)

    # create resulting geometry shape
    polygon = Polygon(points)
    shape = polygon.convex_hull

    # draw shape
    x, y = shape.exterior.xy

    fig = Figure()
    ax = fig.subplots()
    ax.plot(x, y, c="blue")

    # return shape image
    buf = BytesIO()
    fig.savefig(buf, format="png")
    data = base64.b64encode(buf.getbuffer()).decode("ascii")

    return f"<img src='data:image/png;base64,{data}'/><br />{shape.wkt}"


def run():
    app.run(host="0.0.0.0")


if __name__ == "__main__":
    app.run()
