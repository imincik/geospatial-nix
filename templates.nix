{
  custom-packages = {
    description = "Custom Geonix packages build";
    path = ./templates/custom-packages;
    welcomeText = ''
      This is a example demonstrating building of customized Geonix packages
      using overrides template file.

      ## Usage

      * Lock flake dependencies

        ```
        nix flake lock
        ```

      * Add all files to git !

        ```
        git add *
        ```

      ### Customize packages

      * Run `geonix override` command to generate `overrides.nix` template file
        and add `overrides.nix` file to git.

        ```
        nix develop --command geonix override
        git add overrides.nix
        ```

      * Enable `overridesFile` parameter in `geonix.lib.getPackages` function
        in `flake.nix` file.

      * Edit `overrides.nix` file. Add changes to desired packages. Use
        examples on top of the file.

      * Run `nix flake check` to check for syntax errors.

      * Just re-enter development shell. Required packages will be rebuilt
        before shell environment is created.

        ```
        nix develop
        ```

      * To return back to non-customized Geonix packages, just disable
        `overridesFile` parameter in `geonix.lib.getPackages` function.


      ## More info

      * [Nix tutorials](https://nix.dev)
    '';
  };


  python-web-app-example = {
    description = "Example Python web application";
    path = ./templates/python-web-app-example;
    welcomeText = ''
      This is a example web application demonstrating development of Python
      application using geospatial libraries.

      Geospatial Python dependencies are provided by Geonix. Non-geospatial
      Python dependencies are managed by Poetry. All other dependencies are
      coming from Nixpkgs.

      This application can use data generated by local Python server or from
      PostgreSQL/PostGIS database backend. Database container image is provided
      by Geonix.

      ## Usage

      * Lock flake dependencies

        ```
        nix flake lock
        ```

      * Add all files to git !

        ```
        git add *
        ```

      ### Development

      * Enter development shell

        ```
        nix develop
        ```

      * Install Python virtual environment managed by Poetry

        ```
        poetry env use $(which python)
        poetry install
        ```

      * Launch Python application development server (with local data backend)

        ```
        poetry run flask run --reload
        ```

      * Launch Python application development server (with database data backend)

        ```
        nix build .#postgresqlImage
        docker load < ./result
        docker-compose up -d

        BACKEND=db poetry run flask run --reload
        ```

      * Exit development shell

        ```
        exit
        ```

      ## More info

      * [Nixpkgs dockerTools](https://nixos.org/manual/nixpkgs/stable/#sec-pkgs-dockerTools)
      * [mkPoetryApplication](https://github.com/nix-community/poetry2nix#mkPoetryApplication)
      * [Nix tutorials](https://nix.dev)
    '';
  };
}
